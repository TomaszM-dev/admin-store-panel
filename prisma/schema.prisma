// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Store {
  id        String   @id @default(uuid())
  name      String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  categories Category[] @relation("StoreToCategory")
  brands     Brand[]    @relation("StoreToBrand")
  types      Type[]     @relation("StoreToType")
  products   Product[]  @relation("StoreToProduct")
  orders     Order[]    @relation("StoreToOrder")
  locations  Location[] @relation("StoreToLocation")
  rates      Rate[]     @relation("StoreToRate")
  powers     Power[]    @relation("StoreToPower")
}

model Category {
  id       String    @id @default(uuid())
  storeId  String // Foreign Key to Store
  name     String
  store    Store     @relation("StoreToCategory", fields: [storeId], references: [id])
  products Product[] @relation("CategoryToProduct")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])
}

model Brand {
  id      String @id @default(uuid())
  storeId String // Foreign Key to Store
  name    String

  store Store @relation("StoreToBrand", fields: [storeId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]

  @@index([storeId])
}

model Type {
  id        String    @id @default(uuid())
  storeId   String
  name      String
  store     Store     @relation("StoreToType", fields: [storeId], references: [id])
  imageUrl  String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]

  @@index([storeId])
}

model Location {
  id      String @id @default(uuid())
  storeId String
  name    String
  store   Store  @relation("StoreToLocation", fields: [storeId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]

  @@index([storeId])
}

model Rate {
  id      String @id @default(uuid())
  storeId String
  value   String
  store   Store  @relation("StoreToRate", fields: [storeId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]

  @@index([storeId])
}

model Power {
  id      String @id @default(uuid())
  storeId String
  value   String
  store   Store  @relation("StoreToPower", fields: [storeId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]

  @@index([storeId])
}

model Product {
  id         String      @id @default(uuid())
  storeId    String
  name       String
  categoryId String
  price      Decimal
  isFeatured Boolean     @default(false)
  isArchived Boolean     @default(false)
  brandId    String
  typeId     String
  brand      Brand       @relation(fields: [brandId], references: [id])
  store      Store       @relation("StoreToProduct", fields: [storeId], references: [id])
  category   Category    @relation("CategoryToProduct", fields: [categoryId], references: [id])
  type       Type        @relation(fields: [typeId], references: [id])
  images     Image[]
  orderItems OrderItem[]

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  location   Location @relation(fields: [locationId], references: [id])
  power      Power    @relation(fields: [powerId], references: [id])
  rate       Rate     @relation(fields: [rateId], references: [id])
  locationId String
  rateId     String
  powerId    String

  @@index([storeId])
  @@index([powerId])
  @@index([locationId])
  @@index([rateId])
  @@index([brandId])
  @@index([categoryId])
  @@index([typeId])
}

model Image {
  id        String  @id @default(uuid())
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  url       String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
}

model Order {
  id         String      @id @default(uuid())
  storeId    String
  store      Store       @relation("StoreToOrder", fields: [storeId], references: [id])
  orderItems OrderItem[]
  isPaid     Boolean     @default(false)
  phone      String      @default("")
  address    String      @default("")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])
}

model OrderItem {
  id        String  @id @default(uuid())
  orderId   String
  orders    Order   @relation(fields: [orderId], references: [id])
  productId String
  product   Product @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
}
